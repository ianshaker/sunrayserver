// infozadachi.js

// –ú–∞–ø–ø–∏–Ω–≥ UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ Telegram chat_id
const USER_CHAT_MAPPING = {
  // –°—É–ø–µ—Ä–∞–¥–º–∏–Ω
  "943603c3-abd0-47f8-af95-1e60a06fc8b1": -1002614770458, // Ian Mironov
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
  "de22f2df-66bc-444b-b2b8-104bf79bd166": -1002653986952, // –ê–∫–æ–ø –®—É—à–∞–Ω—è–Ω
  "c29869e0-473f-4a3e-a517-687a1a1c0e42": -1002851777686, // –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –ë–∞–ª—É–∫–æ–≤–∞
  "2bae2352-8c7c-4b64-9e7d-f419c2f1b595": -1002701215940, // –ê–Ω—Ç–æ–Ω
  "f687a6de-9da9-48e4-ae0d-0460bd03edf3": -1002625500997, // –ì–ª–µ–± –ú–∏—Ä–æ–Ω–æ–≤
  "a1df15d4-24b4-4120-a18e-8f7e000ff574": -1002502050227, // –î–∞–Ω–∏–∫ –ú–∏—Ä–æ–Ω–æ–≤
  "6f816db9-70f3-463f-b01b-66a1825e505c": -1002881581162, // –ï–ª–µ–Ω–∞ –ú–∏—Ä–æ–Ω–æ–≤–∞
  "44a38a17-bc35-49a8-9a34-27c78310fd9c": -1002712226725, // –ö–æ—Å–∞—Ä–µ–≤–∞ –ò—Ä–∏–Ω–∞
  "3438c85f-b7e8-4e19-aa5b-0391441619fb": -1002791005609, // –ù–∞—Å—Ç—è
  "c9fa6e25-b2ae-4e68-ad4e-e50bffebd071": -1002602155266, // –ü–æ–∑–¥–µ–µ–≤ –ì–µ–Ω–Ω–∞–¥–∏–π
  "1712a00e-da83-4bbb-ad3e-d2884edfce1d": -1002715490676, // –°–≤–µ—Ç–ª–∞–Ω–∞
  "7b85819f-b95b-422b-93b0-4f021c178beb": -1002592223380, // –§–∞–∏–Ω–∞ –ú–∏—Ä–æ–Ω–æ–≤–∞
  "5572d59d-960d-43f1-b805-b60e42c2752c": -1002629184386, // –ß–µ–ª—Ç—É–∏—Ç–æ—Ä—å –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞
  "28906cb8-fb15-40d1-9a8f-13ba4079e6b9": -1002504122184  // –Ø–Ω –®–µ–π–∫–µ—Ä
};

function registerTaskRoute(fastify, telegramBot) {
  fastify.post('/tasks/manager', async (request, reply) => {
    try {
      console.log('üì• –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ:', request.body);
      
      const { type, task, assignees, assigned_by, timestamp } = request.body;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!type || !task || !assignees || !assigned_by) {
        return reply.status(400).send({ 
          error: 'Missing required fields',
          required: ['type', 'task', 'assignees', 'assigned_by']
        });
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      switch (type) {
        case 'task_created':
          await handleTaskCreated(task, assignees, assigned_by, telegramBot);
          break;
        case 'task_updated':
          await handleTaskUpdated(task, assignees, assigned_by, telegramBot);
          break;
        case 'task_completed':
          await handleTaskCompleted(task, assignees, assigned_by, telegramBot);
          break;
        default:
          console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', type);
      }

      return reply.status(200).send({ 
        status: 'success',
        message: 'Task notification processed',
        processed_at: new Date().toISOString()
      });
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ:', error);
      return reply.status(500).send({ 
        error: 'Internal server error',
        message: error.message 
      });
    }
  });
}

async function handleTaskCreated(task, assignees, assigned_by, telegramBot) {
  console.log('üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', task.title);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º (–Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é)
  for (const assignee of assignees) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞—á–∏
    if (assignee.id === assigned_by.id) {
      console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é ${assignee.full_name}`);
      continue;
    }

    const chatId = USER_CHAT_MAPPING[assignee.id];
    
    if (!chatId) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${assignee.full_name} (${assignee.id})`);
      continue;
    }

    const message = `
üîî –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞!
–û—Ç: ${assigned_by.full_name}
___
*${task.title}*
${task.description ? `_${task.description}_` : ''}
___
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)} ${getPriorityText(task.priority)}
–°—Ä–æ–∫: *${task.due_date ? formatDate(task.due_date) : '–ù–µ —É–∫–∞–∑–∞–Ω'}*
–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: ${formatDate(task.created_at)}
    `.trim();

    try {
      await telegramBot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        disable_web_page_preview: true 
      });
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${assignee.full_name} –≤ —á–∞—Ç ${chatId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${assignee.full_name}:`, error);
    }
  }
}

async function handleTaskUpdated(task, assignees, assigned_by, telegramBot) {
  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', task.title);
  
  for (const assignee of assignees) {
    const chatId = USER_CHAT_MAPPING[assignee.id];
    
    if (!chatId) {
      console.log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${assignee.full_name} (${assignee.id})`);
      continue;
    }

    const message = `
üîÑ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!
–û—Ç: ${assigned_by.full_name}
___
*${task.title}*
${task.description ? `_${task.description}_` : ''}
___
–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${getPriorityEmoji(task.priority)} ${getPriorityText(task.priority)}
–°—Ç–∞—Ç—É—Å: ${getStatusEmoji(task.status)} ${getStatusText(task.status)}
–°—Ä–æ–∫: *${task.due_date ? formatDate(task.due_date) : '–ù–µ —É–∫–∞–∑–∞–Ω'}*
    `.trim();

    try {
      await telegramBot.sendMessage(chatId, message, { 
        parse_mode: 'Markdown',
        disable_web_page_preview: true 
      });
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ${assignee.full_name}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:`, error);
    }
  }
}

async function handleTaskCompleted(task, assignees, assigned_by, telegramBot) {
  console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', task.title);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
  const creatorChatId = USER_CHAT_MAPPING[assigned_by.id];
  if (creatorChatId) {
    const message = `
üéâ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
___
*${task.title}*
___
–í—ã–ø–æ–ª–Ω–∏–ª–∏: ${assignees.map(a => a.full_name).join(', ')}
–°—Ç–∞—Ç—É—Å: ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ
–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: *${formatDate(new Date().toISOString())}*
    `.trim();

    try {
      await telegramBot.sendMessage(creatorChatId, message, { 
        parse_mode: 'Markdown',
        disable_web_page_preview: true 
      });
      console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–∑–¥–∞—Ç–µ–ª—é ${assigned_by.full_name}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:`, error);
    }
  }
}

function getPriorityEmoji(priority) {
  switch (priority) {
    case 'urgent': return 'üî•';
    case 'high': return '‚ö°';
    case 'medium': return '‚ö™';
    case 'low': return 'üîµ';
    default: return '‚ö™';
  }
}

function getPriorityText(priority) {
  switch (priority) {
    case 'urgent': return '–°—Ä–æ—á–Ω–æ';
    case 'high': return '–í—ã—Å–æ–∫–∏–π';
    case 'medium': return '–°—Ä–µ–¥–Ω–∏–π';
    case 'low': return '–ù–∏–∑–∫–∏–π';
    default: return '–°—Ä–µ–¥–Ω–∏–π';
  }
}

function getStatusEmoji(status) {
  switch (status) {
    case 'pending': return '‚è≥';
    case 'in_progress': return 'üîÑ';
    case 'completed': return '‚úÖ';
    case 'cancelled': return '‚ùå';
    default: return '‚è≥';
  }
}

function getStatusText(status) {
  switch (status) {
    case 'pending': return '–û–∂–∏–¥–∞–µ—Ç';
    case 'in_progress': return '–í —Ä–∞–±–æ—Ç–µ';
    case 'completed': return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
    case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω–æ';
    default: return '–û–∂–∏–¥–∞–µ—Ç';
  }
}

function formatDate(dateString) {
  if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  const date = new Date(dateString);
  return date.toLocaleString('ru-RU', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
}

module.exports = { registerTaskRoute };