const { createClient } = require("@supabase/supabase-js");
const fs = require("fs");
const path = require("path");

// --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –°–ü–†–ê–í–û–ß–ù–ò–ö–ò ---
const TELEGRAM_CHAT_ID = -1002582438853;

const SUPABASE_URL = "https://xyzkneqhggpxstxqbqhs.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh5emtuZXFoZ2dweHN0eHFicWhzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NTE1MzIsImV4cCI6MjA2MjEyNzUzMn0.HmkcuxviENuQbiYgyQh0MBPr5zYlk88YLnRBlTXaKUU";
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

const TABLES_TO_CHECK = [
  "appeals",
  "appealsotkaz",
  "dobivashki",
  "dogovornew",
  "eventsnew",
  "zamerotkaz"
];

const TABLE_NAMES = {
    appeals: '–í–•–û–î–Ø–©–ò–ï',
    appealsotkaz: '–í–•–û–î–Ø–©–ò–ï –û–¢–ö–ê–ó',
    dobivashki: '–î–û–ë–ò–í–ê–®–ö–ò',
    dogovornew: '–î–û–ì–û–í–û–†–´ –ê–ö–¢–ò–í–ù–´–ï',
    eventsnew: '–°–û–ë–´–¢–ò–Ø',
    zamerotkaz: '–ó–ê–ú–ï–† –û–¢–ö–ê–ó',
    contractsfinalnew: '–î–û–ì–û–í–û–†–´ –ó–ê–í–ï–†–®–ï–ù–ù–´–ï'
};

const MANAGERS = {
    '79933686717': '–î–∞—à–∞',
    '79936875757': '–ê–Ω—Ç–æ–Ω',
    '79253860654': '–ê–Ω—Ç–æ–Ω',
    'mironov1998@vpbx400311913.mangosip.ru': '–Ø–Ω',
    'mironov1998': '–Ø–Ω',
    'gennady@vpbx400311913.mangosip.ru': '–ì–µ–Ω–∞',
    'gennady': '–ì–µ–Ω–∞',
    'gleb@vpbx400311913.mangosip.ru': '–¢–∞–Ω—è',
    'gleb': '–¢–∞–Ω—è',
    'elena@vpbx400311913.mangosip.ru': '–ù–∞—Å—Ç—è',
    'elena': '–ù–∞—Å—Ç—è',
    'svetlanamanager@vpbx400311913.mangosip.ru': '–°–≤–µ—Ç–∞',
    'svetlanamanager': '–°–≤–µ—Ç–∞'
};

const COMPANY_LINES = {
    '79585382001': 'üü¢ SUNRAY',
    '79852194439': 'üü° –ñ–ê–õ–Æ–ó–ò –°–ê–ù',
    '79852196418': 'üîµ –°–ï–¢–ö–ò'
};

const activeCalls = {}; // call_id: –∏–Ω—Ñ–æ –æ –∑–≤–æ–Ω–∫–µ

// === –ù–û–í–û–ï: –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ ===
const callMessages = {}; // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { phoneNumber: { incomingMessageId: number, foundMessageId: number, connectedMessageId: number, dialoutMessageIds: [], managers: [], acceptedManager: null, callData: object, createdAppealId: null } }

function formatPhoneNumber(phone) {
    if (!phone || typeof phone !== 'string') return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –Ω–æ–º–µ—Ä';
    if (phone.includes('@')) return phone.replace('sip:', '').split('@')[0];
    const digits = phone.replace(/\D/g, '');
    if (digits.length === 11 && (digits[0] === '7' || digits[0] === '8')) {
        return `8(${digits.substring(1, 4)})${digits.substring(4, 7)}-${digits.substring(7, 9)}-${digits.substring(9, 11)}`;
    }
    if (digits.length === 10) {
        return `8(${digits.substring(0, 3)})${digits.substring(3, 6)}-${digits.substring(6, 8)}-${digits.substring(8, 10)}`;
    }
    return phone;
}

function getCompanyLineName(phone) {
    if (!phone) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ª–∏–Ω–∏—è';
    return COMPANY_LINES[phone] ? `–õ–∏–Ω–∏—è —Å–∞–π—Ç–∞ ${COMPANY_LINES[phone]}` : `–õ–∏–Ω–∏—è ${phone}`;
}

function isManager(phone) {
    if (!phone) return false;
    let lookup = phone;
    if (phone.includes('@')) lookup = phone.replace('sip:', '');
    return MANAGERS[lookup] !== undefined;
}

function getManagerName(phone) {
    if (!phone) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    let lookup = phone;
    if (phone.includes('@')) lookup = phone.replace('sip:', '');
    return MANAGERS[lookup] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
}

function isOutgoingCall(data) {
    if (data.call_direction === 2) return true;
    if (isManager(data.from?.number)) return true;
    return false;
}

function formatDuration(seconds) {
    if (!seconds || seconds <= 0) return '0 —Å–µ–∫';
    const min = Math.floor(seconds / 60);
    const sec = seconds % 60;
    return min > 0 ? `${min}:${sec.toString().padStart(2, '0')} –º–∏–Ω` : `${sec} —Å–µ–∫`;
}

// === 1. –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤ —Ñ–∞–π–ª–µ contractsfinalnew.json === //
function findContractByPhoneFromFile(phone) {
    try {
        const filePath = path.join(__dirname, "contractsfinalnew.json");
        if (!fs.existsSync(filePath)) return null;
        const contracts = JSON.parse(fs.readFileSync(filePath, "utf8"));
        // –∏—â–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é (–ª—É—á—à–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å "—á–∏—Å—Ç—ã–π" –Ω–æ–º–µ—Ä –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)
        const clearPhone = phone.replace(/\D/g, '');
        return contracts.find(contract => {
            // –∏—â–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–æ–º–µ—Ä—É –∏–∑ —è—á–µ–π–∫–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            if (!contract.phone) return false;
            return contract.phone
                .split(/[,\.]/)
                .map(p => p.replace(/\s/g, '').replace(/\D/g, ''))
                .some(num => num === clearPhone);
        }) || null;
    } catch (e) {
        return null;
    }
}

// === 2. –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Supabase (–∫—Ä–æ–º–µ dogovorfinished) === //
async function findClientInfoByPhone(phone) {
    // –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ —Å –∑–∞–ø—è—Ç—ã–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º ILIKE '%–Ω–æ–º–µ—Ä%'
    for (const table of TABLES_TO_CHECK) {
        let fields = [];
        switch (table) {
            case "appeals":
            case "appealsotkaz":
            case "dobivashki":
                fields = ["appeal_number", "client_name", "phone", "city", "dialog"];
                break;
            case "dogovornew":
                fields = ["appeal_id", "dogovor_date", "dogovor_number", "city", "client_name", "phone", "total_numbers"];
                break;
            case "eventsnew":
                fields = [
                    "appeal_number", "type", "client_name", "phone", "city", "dialog", "master", "date", "start_time", "end_time"
                ];
                break;
            case "zamerotkaz":
                fields = ["appeal_number", "client_name", "phone", "city", "dialog"];
                break;
            default:
                continue;
        }
        // —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞
        const searchNumber = phone.trim();
        const { data, error } = await supabase
            .from(table)
            .select(fields.join(","))
            .ilike('phone', `%${searchNumber}%`)
            .limit(1);
        if (error) continue;
        if (data && data.length > 0) {
            // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–æ–º–µ—Ä—É –∏–∑ —è—á–µ–π–∫–∏
            const clearSearch = searchNumber.replace(/\D/g, '');
            const foundRow = data.find(row => {
                return row.phone &&
                    row.phone
                        .split(/[,\.]/)
                        .map(p => p.replace(/\s/g, '').replace(/\D/g, ''))
                        .some(num => num === clearSearch);
            });
            if (foundRow) {
                return { table, info: foundRow };
            }
        }
    }
    return null;
}

// === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===
function createFinalCallMessage(callData, foundInfo, duration, createdAppealId) {
    const { formattedFromNumber, lineName, managers, acceptedManager } = callData;
    
    let finalMsg = `üìû <b>–ó–ê–í–ï–†–®–ï–ù–ù–´–ô –ó–í–û–ù–û–ö</b>\n`;
    finalMsg += `–ê–±–æ–Ω–µ–Ω—Ç: <b>${formattedFromNumber}</b>\n`;
    finalMsg += `${lineName}\n`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –∫–æ–º—É –∑–≤–æ–Ω–∏–ª–∏
    if (managers && managers.length > 0) {
        if (managers.length === 1) {
            finalMsg += `–ó–≤–æ–Ω–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: <b>${managers[0]}</b>\n`;
        } else {
            finalMsg += `–î–æ–∑–≤–æ–Ω: <b>${managers.join(' ‚Üí ')}</b>\n`;
        }
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ç–æ –ø—Ä–∏–Ω—è–ª
    if (acceptedManager) {
        finalMsg += `–ü—Ä–∏–Ω—è–ª: <b>${acceptedManager}</b> (${formatDuration(duration)})\n\n`;
    } else {
        finalMsg += `–ù–µ –ø—Ä–∏–Ω—è—Ç (${formatDuration(duration)})\n\n`;
    }
    
    if (foundInfo) {
        const sectionName = TABLE_NAMES[foundInfo.table] || foundInfo.table;
        finalMsg += `üìã <b>–ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ: ${sectionName}</b>\n`;
        
        switch (foundInfo.table) {
            case "appeals":
            case "appealsotkaz":
            case "dobivashki":
            case "zamerotkaz":
                finalMsg += `–ù–æ–º–µ—Ä: <b>${foundInfo.info.appeal_number}</b>\n`;
                finalMsg += `–ö–ª–∏–µ–Ω—Ç: <b>${foundInfo.info.client_name || ""}</b>\n`;
                finalMsg += `–ì–æ—Ä–æ–¥: <b>${foundInfo.info.city || ""}</b>\n`;
                if (foundInfo.info.dialog) finalMsg += `–î–∏–∞–ª–æ–≥: <i>${foundInfo.info.dialog}</i>\n`;
                break;
            case "dogovornew":
                finalMsg += `ID –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>${foundInfo.info.appeal_id}</b>\n`;
                finalMsg += `–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${foundInfo.info.dogovor_number || ""}</b>\n`;
                finalMsg += `–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${foundInfo.info.dogovor_date || ""}</b>\n`;
                finalMsg += `–ö–ª–∏–µ–Ω—Ç: <b>${foundInfo.info.client_name || ""}</b>\n`;
                finalMsg += `–ì–æ—Ä–æ–¥: <b>${foundInfo.info.city || ""}</b>\n`;
                if (foundInfo.info.total_numbers) finalMsg += `–ò–∑–¥–µ–ª–∏–π: <b>${foundInfo.info.total_numbers}</b>\n`;
                break;
            case "eventsnew":
                finalMsg += `–ù–æ–º–µ—Ä: <b>${foundInfo.info.appeal_number}</b>\n`;
                finalMsg += `–¢–∏–ø: <b>${foundInfo.info.type || ""}</b>\n`;
                finalMsg += `–ö–ª–∏–µ–Ω—Ç: <b>${foundInfo.info.client_name || ""}</b>\n`;
                finalMsg += `–ì–æ—Ä–æ–¥: <b>${foundInfo.info.city || ""}</b>\n`;
                finalMsg += `–ú–∞—Å—Ç–µ—Ä: <b>${foundInfo.info.master || ""}</b>\n`;
                finalMsg += `–î–∞—Ç–∞: <b>${foundInfo.info.date || ""}</b>\n`;
                finalMsg += `–í—Ä–µ–º—è: <b>${foundInfo.info.start_time || ""}-${foundInfo.info.end_time || ""}</b>\n`;
                if (foundInfo.info.dialog) finalMsg += `–î–∏–∞–ª–æ–≥: <i>${foundInfo.info.dialog}</i>\n`;
                break;
            case "contractsfinalnew":
                finalMsg += `ID –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>${foundInfo.info.appeal_id}</b>\n`;
                finalMsg += `–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${foundInfo.info.dogovor_number || ""}</b>\n`;
                finalMsg += `–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${foundInfo.info.dogovor_date || ""}</b>\n`;
                finalMsg += `–ö–ª–∏–µ–Ω—Ç: <b>${foundInfo.info.client_name || ""}</b>\n`;
                finalMsg += `–ì–æ—Ä–æ–¥: <b>${foundInfo.info.city || ""}</b>\n`;
                if (foundInfo.info.total_numbers) finalMsg += `–ò–∑–¥–µ–ª–∏–π: <b>${foundInfo.info.total_numbers}</b>\n`;
                break;
            default:
                finalMsg += "(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n";
        }
    } else {
        finalMsg += `üìã <b>–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n`;
        if (createdAppealId) {
            finalMsg += `–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <b>${createdAppealId}</b>\n`;
        }
    }
    
    return finalMsg;
}

async function handleMangoWebhook(request, reply, telegramBot) {
    let body = request.body || {};

    if (typeof body.json === "string") {
        try {
            body = { ...body, ...JSON.parse(body.json) };
        } catch (e) {
            return reply.code(400).send({ error: "Bad json" });
        }
    }

    // === –ò–¢–û–ì –ó–í–û–ù–ö–ê (–∫–æ–≥–¥–∞ –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è) ===
    if (body.hasOwnProperty('call_direction') && body.hasOwnProperty('from') && body.hasOwnProperty('to')) {
        if (isOutgoingCall(body)) return reply.send({ status: "outgoing_ignored" });

        const fromNumber = body.from?.number;
        const toNumber = body.to?.number;
        const lineNumber = body.line_number;
        const talkTime = body.talk_time || 0;
        const endTime = body.end_time || 0;
        const duration = talkTime && endTime ? endTime - talkTime : 0;
        const formattedFromNumber = formatPhoneNumber(fromNumber);

        // === –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞ ===
        const messageData = callMessages[formattedFromNumber];
        
        if (messageData) {
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try {
                if (messageData.incomingMessageId) {
                    await telegramBot.deleteMessage(TELEGRAM_CHAT_ID, messageData.incomingMessageId);
                }
                if (messageData.foundMessageId) {
                    await telegramBot.deleteMessage(TELEGRAM_CHAT_ID, messageData.foundMessageId);
                }
                if (messageData.connectedMessageId) {
                    await telegramBot.deleteMessage(TELEGRAM_CHAT_ID, messageData.connectedMessageId);
                }
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–∑–≤–æ–Ω–∞—Ö
                if (messageData.dialoutMessageIds && messageData.dialoutMessageIds.length > 0) {
                    for (const msgId of messageData.dialoutMessageIds) {
                        await telegramBot.deleteMessage(TELEGRAM_CHAT_ID, msgId);
                    }
                }
            } catch (e) {
                console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:", e.message);
            }
            
            // –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const finalMessage = createFinalCallMessage(messageData.callData, messageData.foundInfo, duration, messageData.createdAppealId);
            await telegramBot.sendMessage(TELEGRAM_CHAT_ID, finalMessage, { parse_mode: "HTML" });
            
            // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
            delete callMessages[formattedFromNumber];
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            const lineName = getCompanyLineName(lineNumber);
            let managerName = getManagerName(toNumber);
            await telegramBot.sendMessage(
                TELEGRAM_CHAT_ID,
                `‚úÖ <b>–ò–¢–û–ì –ó–í–û–ù–ö–ê</b> ${formattedFromNumber}\n${lineName}\n–ú–µ–Ω–µ–¥–∂–µ—Ä: <b>${managerName}</b> (${formatDuration(duration)})`,
                { parse_mode: "HTML" }
            );
        }

        return reply.send({ status: "summary_sent" });
    }

    const callState = body.call_state;
    const callId = body.call_id || body.entry_id;
    const fromNumber = body.from?.number;
    const toNumber = body.to?.number;
    const lineNumber = body.to?.line_number;
    const location = body.location;
    const seq = body.seq;

    // Appeared ‚Äî –Ω–æ–≤—ã–π –≤—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ –¥–æ–∑–≤–æ–Ω
    if (callState === "Appeared" && location === "abonent" && !isManager(fromNumber)) {
        const formattedFromNumber = formatPhoneNumber(fromNumber);
        const formattedToNumber = formatPhoneNumber(toNumber);
        const managerName = getManagerName(toNumber);

        // === –ü–†–û–í–ï–†–Ø–ï–ú: —ç—Ç–æ –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ –∏–ª–∏ –¥–æ–∑–≤–æ–Ω? ===
        if (callMessages[formattedFromNumber]) {
            // –≠—Ç–æ –¥–æ–∑–≤–æ–Ω –∫ –¥—Ä—É–≥–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É
            const dialoutMessage = await telegramBot.sendMessage(
                TELEGRAM_CHAT_ID,
                `–î–æ–∑–≤–æ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É ${managerName}`,
                { parse_mode: "HTML" }
            );
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–∑–≤–æ–Ω–µ
            callMessages[formattedFromNumber].dialoutMessageIds.push(dialoutMessage.message_id);
            callMessages[formattedFromNumber].callData.managers.push(managerName);
            
            return reply.send({ status: "dialout_processed" });
        }

        // === –≠—Ç–æ –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ ===
        if (activeCalls[callId]) return reply.send({ status: "already_appeared" });
        activeCalls[callId] = true;

        const lineName = getCompanyLineName(lineNumber);

        // === –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–ï–†–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –ò –°–û–•–†–ê–ù–Ø–ï–ú –ï–ì–û ID ===
        let msg = `üìû <b>–í–•–û–î–Ø–©–ò–ô –ó–í–û–ù–û–ö</b>\n–ê–±–æ–Ω–µ–Ω—Ç: <b>${formattedFromNumber}</b>\n${lineName}\n–ó–≤–æ–Ω–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É: ${formattedToNumber} (${managerName})\n\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ...`;
        const incomingMessage = await telegramBot.sendMessage(TELEGRAM_CHAT_ID, msg, { parse_mode: "HTML" });
        
        // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –í –ü–ê–ú–Ø–¢–ò ===
        callMessages[formattedFromNumber] = {
            incomingMessageId: incomingMessage.message_id,
            foundMessageId: null,
            connectedMessageId: null,
            dialoutMessageIds: [],
            foundInfo: null,
            createdAppealId: null,
            callData: {
                formattedFromNumber,
                lineName,
                managers: [managerName],
                acceptedManager: null
            }
        };

        // === –ü–û–ò–°–ö –°–ù–ê–ß–ê–õ–ê –í contractsfinalnew.json ===
        const foundContract = findContractByPhoneFromFile(formattedFromNumber);
        if (foundContract) {
            // –®–∞–±–ª–æ–Ω –¥–ª—è —Ñ–∞–π–ª–∞
            let replyMsg = `‚ÑπÔ∏è <b>${TABLE_NAMES['contractsfinalnew']}</b>\n`;
            replyMsg +=
                `ID –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>${foundContract.appeal_id}</b>\n` +
                `–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${foundContract.dogovor_number || ""}</b>\n` +
                `–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${foundContract.dogovor_date || ""}</b>\n` +
                `–ö–ª–∏–µ–Ω—Ç: <b>${foundContract.client_name || ""}</b>\n` +
                `–ì–æ—Ä–æ–¥: <b>${foundContract.city || ""}</b>\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: <b>${foundContract.phone || ""}</b>\n` +
                (foundContract.total_numbers ? `–ò–∑–¥–µ–ª–∏–π: <b>${foundContract.total_numbers}</b>\n` : '');
            
            const foundMessage = await telegramBot.sendMessage(TELEGRAM_CHAT_ID, replyMsg, { parse_mode: "HTML" });
            
            // === –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –û –ù–ê–ô–î–ï–ù–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ===
            callMessages[formattedFromNumber].foundMessageId = foundMessage.message_id;
            callMessages[formattedFromNumber].foundInfo = {
                table: 'contractsfinalnew',
                info: foundContract
            };
            
            return reply.send({ status: "appeared_processed", source: "contractsfinalnew.json" });
        }

        // === –ï—Å–ª–∏ –ù–ï –Ω–∞–π–¥–µ–Ω ‚Äî –∏—â–µ–º –≤ Supabase ===
        const found = await findClientInfoByPhone(formattedFromNumber);
        if (found) {
            const sectionName = TABLE_NAMES[found.table] || found.table;
            let replyMsg = `‚ÑπÔ∏è <b>${sectionName}</b>\n`;
            switch (found.table) {
                case "appeals":
                case "appealsotkaz":
                case "dobivashki":
                case "zamerotkaz":
                    replyMsg +=
                        `–ù–æ–º–µ—Ä: <b>${found.info.appeal_number}</b>\n` +
                        `–ö–ª–∏–µ–Ω—Ç: <b>${found.info.client_name || ""}</b>\n` +
                        `–ì–æ—Ä–æ–¥: <b>${found.info.city || ""}</b>\n` +
                        (found.info.dialog ? `–î–∏–∞–ª–æ–≥: <i>${found.info.dialog}</i>\n` : '');
                    break;
                case "dogovornew":
                    replyMsg +=
                        `ID –æ–±—Ä–∞—â–µ–Ω–∏—è: <b>${found.info.appeal_id}</b>\n` +
                        `–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${found.info.dogovor_number || ""}</b>\n` +
                        `–î–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${found.info.dogovor_date || ""}</b>\n` +
                        `–ö–ª–∏–µ–Ω—Ç: <b>${found.info.client_name || ""}</b>\n` +
                        `–ì–æ—Ä–æ–¥: <b>${found.info.city || ""}</b>\n` +
                        `–¢–µ–ª–µ—Ñ–æ–Ω: <b>${found.info.phone || ""}</b>\n` +
                        (found.info.total_numbers ? `–ò–∑–¥–µ–ª–∏–π: <b>${found.info.total_numbers}</b>\n` : '');
                    break;
                case "eventsnew":
                    replyMsg +=
                        `–ù–æ–º–µ—Ä: <b>${found.info.appeal_number}</b>\n` +
                        `–¢–∏–ø: <b>${found.info.type || ""}</b>\n` +
                        `–ö–ª–∏–µ–Ω—Ç: <b>${found.info.client_name || ""}</b>\n` +
                        `–ì–æ—Ä–æ–¥: <b>${found.info.city || ""}</b>\n` +
                        `–ú–∞—Å—Ç–µ—Ä: <b>${found.info.master || ""}</b>\n` +
                        `–î–∞—Ç–∞: <b>${found.info.date || ""}</b>\n` +
                        `–í—Ä–µ–º—è: <b>${found.info.start_time || ""}-${found.info.end_time || ""}</b>\n` +
                        (found.info.dialog ? `–î–∏–∞–ª–æ–≥: <i>${found.info.dialog}</i>\n` : '');
                    break;
                default:
                    replyMsg += "(–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)\n";
            }
            
            const foundMessage = await telegramBot.sendMessage(TELEGRAM_CHAT_ID, replyMsg, { parse_mode: "HTML" });
            
            // === –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –û –ù–ê–ô–î–ï–ù–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò ===
            callMessages[formattedFromNumber].foundMessageId = foundMessage.message_id;
            callMessages[formattedFromNumber].foundInfo = found;
            
        } else {
            // –õ–û–ì–ò–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ (–æ—Å—Ç–∞–≤—å –∫–∞–∫ –µ—Å—Ç—å)
            let appeal_id = null;
            try {
                const { data: ids, error: idError } = await supabase
                    .from("ids")
                    .select("appeal_id")
                    .eq("is_used", false)
                    .is('used_at', null)
                    .order("id", { ascending: true })
                    .limit(1);
                if (idError) throw idError;
                if (!ids || !ids.length) throw new Error("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–π–¥–∏!");
                appeal_id = ids[0].appeal_id;
            } catch (e) {
                const errorMessage = await telegramBot.sendMessage(
                    TELEGRAM_CHAT_ID,
                    `‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–π–¥–∏</b>\n${e.message}`,
                    { parse_mode: "HTML" }
                );
                
                // === –°–û–•–†–ê–ù–Ø–ï–ú ID –°–û–û–ë–©–ï–ù–ò–Ø –û–ë –û–®–ò–ë–ö–ï ===
                callMessages[formattedFromNumber].foundMessageId = errorMessage.message_id;
                
                return reply.code(500).send({ error: "id_error" });
            }

            try {
                const used_at = new Date().toISOString();
                await supabase
                    .from("ids")
                    .update({ is_used: true, used_at })
                    .eq("appeal_id", appeal_id);
            } catch {}

            const newAppeal = {
                appeal_number: appeal_id,
                client_name: "",
                phone: formattedFromNumber,
                city: "",
                address: "",
                detailed_address: "",
                source: "–ó–≤–æ–Ω–æ–∫",
                manager: managerName,
                dialog: "",
                reminder_date: null,
                reminder_time: null,
                task_description: "",
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                status: "–ê–∫—Ç–∏–≤–Ω–æ",
                product_type: "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
            };

            console.log("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ appeals:", newAppeal);

            try {
                const { data, error } = await supabase.from("appeals").insert([newAppeal]);
                console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏ –≤ appeals:", { data, error });
                
                const successMessage = await telegramBot.sendMessage(
                    TELEGRAM_CHAT_ID,
                    `‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞</b>\n${formattedFromNumber}\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <b>${appeal_id}</b>`,
                    { parse_mode: "HTML" }
                );
                
                // === –°–û–•–†–ê–ù–Ø–ï–ú ID –°–û–û–ë–©–ï–ù–ò–Ø –û –°–û–ó–î–ê–ù–ò–ò –ó–ê–Ø–í–ö–ò –ò –ù–û–ú–ï–† –ó–ê–Ø–í–ö–ò ===
                callMessages[formattedFromNumber].foundMessageId = successMessage.message_id;
                callMessages[formattedFromNumber].createdAppealId = appeal_id;
                
            } catch (e) {
                const errorMessage = await telegramBot.sendMessage(
                    TELEGRAM_CHAT_ID,
                    `‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏</b>\n${formattedFromNumber}\n${e.message}`,
                    { parse_mode: "HTML" }
                );
                
                // === –°–û–•–†–ê–ù–Ø–ï–ú ID –°–û–û–ë–©–ï–ù–ò–Ø –û–ë –û–®–ò–ë–ö–ï ===
                callMessages[formattedFromNumber].foundMessageId = errorMessage.message_id;
                
                return reply.code(500).send({ error: "insert_error" });
            }
        }
        return reply.send({ status: "appeared_processed" });
    }

    // Connected ‚Äî –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    if (callState === "Connected" && !isManager(fromNumber)) {
        const formattedFromNumber = formatPhoneNumber(fromNumber);
        const managerName = getManagerName(toNumber);

        // === –°–û–•–†–ê–ù–Ø–ï–ú –ò–ù–§–û–†–ú–ê–¶–ò–Æ –û –¢–û–ú, –ö–¢–û –ü–†–ò–ù–Ø–õ –ó–í–û–ù–û–ö ===
        if (callMessages[formattedFromNumber]) {
            callMessages[formattedFromNumber].callData.acceptedManager = managerName;
        }

        const connectedMessage = await telegramBot.sendMessage(
            TELEGRAM_CHAT_ID,
            `‚úÖ <b>–ó–í–û–ù–û–ö –ü–†–ò–ù–Ø–¢</b> (${managerName})\n–ê–±–æ–Ω–µ–Ω—Ç: <b>${formattedFromNumber}</b>\n<i>–Ø —Å–æ–æ–±—â—É –∫–æ–≥–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–∏—Ç –¥–∏–∞–ª–æ–≥</i>`,
            { parse_mode: "HTML" }
        );

        // === –°–û–•–†–ê–ù–Ø–ï–ú ID –°–û–û–ë–©–ï–ù–ò–Ø "–ó–í–û–ù–û–ö –ü–†–ò–ù–Ø–¢" ===
        if (callMessages[formattedFromNumber]) {
            callMessages[formattedFromNumber].connectedMessageId = connectedMessage.message_id;
        }

        return reply.send({ status: "connected" });
    }

    if (callState === "Disconnected" && activeCalls[callId]) {
        delete activeCalls[callId];
        return reply.send({ status: "disconnected" });
    }

    return reply.send({ status: "not_handled" });
}

module.exports = { handleMangoWebhook };
