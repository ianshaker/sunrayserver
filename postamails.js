const { createClient } = require("@supabase/supabase-js");
const { google } = require("googleapis");
const fs = require("fs");
const path = require("path");
const schedule = require("node-schedule");

const TELEGRAM_CHAT_ID = -1002582438853;

// -- –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ server.js –∏ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è —Å—é–¥–∞ (—Å–º. –≤–Ω–∏–∑—É export)
let TELEGRAM_BOT = null;

// Supabase setup
const SUPABASE_URL = "https://xyzkneqhggpxstxqbqhs.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inh5emtuZXFoZ2dweHN0eHFicWhzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY1NTE1MzIsImV4cCI6MjA2MjEyNzUzMn0.HmkcuxviENuQbiYgyQh0MBPr5zYlk88YLnRBlTXaKUU";
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

const TABLES_TO_CHECK = [
  "appeals", "appealsotkaz", "dobivashki",
  "dogovornew", "eventsnew", "zamerotkaz"
];

const PRODUCT_KEYWORDS = [
  "–†—É–ª–æ–Ω–Ω—ã–µ —à—Ç–æ—Ä—ã", "–†–∏–º—Å–∫–∏–µ —à—Ç–æ—Ä—ã", "–ñ–∞–ª—é–∑–∏", "–ú–æ—Å–∫–∏—Ç–Ω—ã–µ —Å–µ—Ç–∫–∏"
];

const SCOPES = ["https://www.googleapis.com/auth/gmail.readonly"];
const TOKEN_PATH = path.join(__dirname, "data", "gmail-token.json");
const CREDENTIALS_PATH = path.join(__dirname, "data", "gmail-credentials.json");
const CACHE_PATH = path.join(__dirname, "data", "postamailsCache.json");

let gmailClient = null;
let oAuth2Client = null;

// === –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
let lastTokenErrorSentAt = 0;
const TOKEN_ERROR_INTERVAL_MS = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞

// === –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /gmail_code ===
let pendingOAuth2Client = null;

function getGmailAuthUrl() {
  if (!fs.existsSync(CREDENTIALS_PATH)) return null;
  const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf8"));
  const { client_secret, client_id, redirect_uris } = credentials.installed || credentials.web;
  pendingOAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);
  return pendingOAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES,
    prompt: 'consent'
  });
}

// ---- Gmail API ----
async function initGmailClient() {
  if (!fs.existsSync(CREDENTIALS_PATH)) throw new Error("Gmail credentials file not found.");
  const credentials = JSON.parse(fs.readFileSync(CREDENTIALS_PATH, "utf8"));
  const { client_secret, client_id, redirect_uris } = credentials.installed || credentials.web;
  oAuth2Client = new google.auth.OAuth2(client_id, client_secret, redirect_uris[0]);
  if (!fs.existsSync(TOKEN_PATH)) throw new Error("No Gmail token found. Please authorize first.");
  const token = JSON.parse(fs.readFileSync(TOKEN_PATH, "utf8"));
  oAuth2Client.setCredentials(token);
  gmailClient = google.gmail({ version: "v1", auth: oAuth2Client });
  if (!fs.existsSync(CACHE_PATH)) fs.writeFileSync(CACHE_PATH, JSON.stringify({ date: '', emailIds: [] }, null, 2));
  console.log("Gmail API client initialized.");
}

// ---- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ----
function formatPhoneClassic(digits) {
  if (!digits) return "";
  digits = digits.replace(/^(\+7|7|8)/, "");
  if (digits.length !== 10) return digits;
  return `8(${digits.substring(0, 3)})${digits.substring(3, 6)}-${digits.substring(6, 8)}-${digits.substring(8, 10)}`;
}

// ---- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, –ø–µ—Ä–µ–≤–æ–¥ –∫ —Ñ–æ—Ä–º–∞—Ç—É –±–∞–∑—ã ----
function extractPhone(text) {
  const match = text.match(/\+7\s*\(?\d{3}\)?[-\s]?\d{3}[-\s]?\d{2}[-\s]?\d{2}/);
  if (!match) return null;
  const digits = match[0].replace(/\D/g, "");
  return formatPhoneClassic(digits);
}

// ---- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: –≤—Å–µ–≥–¥–∞ —Ñ–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ –±–∞–∑–µ! ----
function normalizePhone(phone) {
  if (!phone) return null;
  const digits = phone.replace(/\D/g, "");
  if (digits.length === 11) {
    return formatPhoneClassic(digits);
  }
  if (digits.length === 10) {
    return formatPhoneClassic('8' + digits);
  }
  return phone;
}

function extractName(text) {
  const match = text.match(/–ò–º—è:\s*(.+)/i) || text.match(/–í–∞—à–µ –∏–º—è:\s*(.+)/i);
  return match ? match[1].trim() : "";
}

function extractCity(text) {
  const match = text.match(/–ì–æ—Ä–æ–¥:\s*(.+)/i);
  return match ? match[1].trim() : "–ë–µ–∑ –≥–æ—Ä–æ–¥–∞";
}

function extractProduct(text) {
  const found = PRODUCT_KEYWORDS.find(p => text.includes(p));
  return found || "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ —É–∫–∞–∑–∞–Ω";
}

// ---- –ü–æ–∏—Å–∫ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –¥–æ–≥–æ–≤–æ—Ä–∞–º (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª) ----
function findContractByPhoneFromFile(phone) {
  try {
    const filePath = path.join(__dirname, "contractsfinalnew.json");
    if (!fs.existsSync(filePath)) return null;
    const contracts = JSON.parse(fs.readFileSync(filePath, "utf8"));
    const clearPhone = phone.replace(/\D/g, '');
    return contracts.find(contract => {
      const contractPhone = (contract.phone || '').replace(/\D/g, '');
      return contractPhone && contractPhone === clearPhone;
    }) || null;
  } catch (e) {
    return null;
  }
}

// ---- –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ Supabase –ø–æ –≤—Å–µ–º —Ç–∞–±–ª–∏—Ü–∞–º ----
async function findExistingAppealByPhone(normalizedPhone) {
  for (const table of TABLES_TO_CHECK) {
    const { data, error } = await supabase
      .from(table)
      .select("*")
      .eq("phone", normalizedPhone)
      .limit(1);
    if (error) continue;
    if (data && data.length > 0) {
      return { table, info: data[0] };
    }
  }
  return null;
}

// ---- –†–∞–±–æ—Ç–∞ —Å Supabase ----
async function getFreeAppealId() {
  console.log("[getFreeAppealId] ‚Äî –ò—â—É —Å–≤–æ–±–æ–¥–Ω—ã–π appeal_id...");
  const { data, error } = await supabase
    .from("ids")
    .select("id, appeal_id, is_used, used_at")
    .eq("is_used", false)
    .is("used_at", null)
    .order("id", { ascending: true })
    .limit(10);
  if (error) console.error("[getFreeAppealId] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
  if (!data || data.length === 0) {
    console.warn("[getFreeAppealId] –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö ID! DATA:", data);
    throw new Error("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö ID");
  }
  console.log("[getFreeAppealId] –ù–∞–π–¥–µ–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö:", data.length, "–ü–µ—Ä–≤—ã–π:", data[0]);
  return data[0].appeal_id;
}

async function markAppealIdUsed(appeal_id) {
  const used_at = new Date().toISOString();
  console.log(`[markAppealIdUsed] –û—Ç–º–µ—á–∞—é appeal_id ${appeal_id} –∫–∞–∫ is_used=true, used_at=${used_at}`);
  const { error } = await supabase.from("ids").update({ is_used: true, used_at }).eq("appeal_id", appeal_id);
  if (error) {
    console.error(`[markAppealIdUsed] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ appeal_id ${appeal_id}:`, error);
  } else {
    console.log(`[markAppealIdUsed] appeal_id ${appeal_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.`);
  }
}

// ---- –í—Å—Ç–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ ----
async function insertAppealFromEmail(emailText) {
  const phone = extractPhone(emailText);
  if (!phone) throw new Error("–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω");
  const normalizedPhone = normalizePhone(phone);
  if (!normalizedPhone) throw new Error("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä");

  // === –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–æ–≤ ===
  const contract = findContractByPhoneFromFile(normalizedPhone);
  if (contract) {
    if (TELEGRAM_BOT) {
      await TELEGRAM_BOT.sendMessage(
        TELEGRAM_CHAT_ID,
        `‚õîÔ∏è <b>–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–∞—Ö</b>\n–ù–æ–º–µ—Ä: <b>${contract.appeal_id || ''}</b>\n–ö–ª–∏–µ–Ω—Ç: <b>${contract.client_name || ''}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>${contract.phone || ''}</b>\n–ì–æ—Ä–æ–¥: <b>${contract.city || ''}</b>\n–ù–æ–º–µ—Ä –¥–æ–≥–æ–≤–æ—Ä–∞: <b>${contract.dogovor_number || ''}</b>`,
        { parse_mode: "HTML" }
      );
    }
    return "–ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–∞—Ö";
  }

  // === –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ Supabase ===
  const existing = await findExistingAppealByPhone(normalizedPhone);
  if (existing) {
    if (TELEGRAM_BOT) {
      let msg = `üì® <b>–ü–æ—á—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ</b>\n`;
      msg += `–¢–∞–±–ª–∏—Ü–∞: <b>${existing.table}</b>\n`;
      msg += `ID: <b>${existing.info.appeal_id || existing.info.appeal_number || ''}</b>\n`;
      msg += `–ö–ª–∏–µ–Ω—Ç: <b>${existing.info.client_name || ''}</b>\n`;
      msg += `–¢–µ–ª–µ—Ñ–æ–Ω: <b>${normalizedPhone}</b>\n`;
      msg += `–ì–æ—Ä–æ–¥: <b>${existing.info.city || ''}</b>\n`;
      msg += `–ü—Ä–æ–¥—É–∫—Ç: <b>${existing.info.product_type || ''}</b>\n`;
      msg += `–ò—Å—Ö–æ–¥–Ω–æ–µ –ø–∏—Å—å–º–æ:\n<pre>${emailText.substring(0, 1000)}</pre>`;
      await TELEGRAM_BOT.sendMessage(TELEGRAM_CHAT_ID, msg, { parse_mode: "HTML" });
    }
    return "–£–∂–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞";
  }

  const name = extractName(emailText);
  const city = extractCity(emailText);
  const product_type = extractProduct(emailText);
  const appeal_id = await getFreeAppealId();
  await markAppealIdUsed(appeal_id);

  const appeal = {
    appeal_number: appeal_id,
    client_name: name,
    phone: normalizedPhone,
    city,
    source: "–ü–æ—á—Ç–∞",
    manager: "–Ø–Ω",
    dialog: emailText,
    product_type,
    status: "–ê–∫—Ç–∏–≤–Ω–æ",
    address: "",
    detailed_address: "",
    reminder_date: null,
    reminder_time: null,
    task_description: "",
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  };

  const { error: insertError } = await supabase.from("appeals").insert([appeal]);
  if (insertError) throw insertError;

  if (TELEGRAM_BOT) {
    await TELEGRAM_BOT.sendMessage(
      TELEGRAM_CHAT_ID,
      `üì® <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –ü–û–ß–¢–´</b>\n–ù–æ–º–µ—Ä: <b>${appeal_id}</b>\n–ö–ª–∏–µ–Ω—Ç: <b>${name}</b>\n–¢–µ–ª–µ—Ñ–æ–Ω: <b>${normalizedPhone}</b>\n–ì–æ—Ä–æ–¥: <b>${city}</b>\n–ü—Ä–æ–¥—É–∫—Ç: <b>${product_type}</b>`,
      { parse_mode: "HTML" }
    );
  }
  return "–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞";
}

// ---- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º ----
async function checkNewEmails() {
  const now = new Date();
  const hourMsk = (now.getUTCHours() + 3) % 24; // –ú–æ—Å–∫–≤–∞ = UTC+3
  if (hourMsk < 9 || hourMsk > 21) {
    console.log(`[${now.toISOString()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ‚Äî –Ω–µ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (–ú–°–ö: ${hourMsk}:00)`);
    return;
  }
  try {
    console.log(`[${now.toISOString()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–ú–°–ö: ${hourMsk}:00)`);
    const today = new Date();
    const formattedDate = `${today.getFullYear()}/${today.getMonth() + 1}/${today.getDate()}`;
    let cache = { date: '', emailIds: [] };
    if (fs.existsSync(CACHE_PATH)) cache = JSON.parse(fs.readFileSync(CACHE_PATH, "utf8"));
    if (cache.date !== formattedDate) {
      cache = { date: formattedDate, emailIds: [] };
    }
    const res = await gmailClient.users.messages.list({
      userId: 'me',
      q: `label:"–ó–∞—è–≤–∫–∏ Sunray" after:${formattedDate}`,
      maxResults: 20
    });
    const ids = (res.data.messages || []).map(m => m.id);
    const newIds = ids.filter(id => !cache.emailIds.includes(id));
    if (newIds.length === 0) return;

    for (const id of newIds) {
      try {
        const details = await gmailClient.users.messages.get({ userId: 'me', id, format: 'full' });
        let body = '';
        if (details.data.payload.parts) {
          const textPart = details.data.payload.parts.find(p => p.mimeType === 'text/plain') ||
                           details.data.payload.parts.find(p => p.mimeType === 'text/html');
          if (textPart && textPart.body.data) body = Buffer.from(textPart.body.data, 'base64').toString('utf8');
        } else if (details.data.payload.body && details.data.payload.body.data) {
          body = Buffer.from(details.data.payload.body.data, 'base64').toString('utf8');
        }
        await insertAppealFromEmail(body);
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞:", err.message);
      }
    }
    cache.emailIds = [...cache.emailIds, ...newIds];
    cache.date = formattedDate;
    fs.writeFileSync(CACHE_PATH, JSON.stringify(cache, null, 2));
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—á—Ç—ã:", err.message);

    // === –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è invalid_grant/expired token ===
    if (err.message && (
      err.message.includes('invalid_grant') ||
      err.message.includes('Token has been expired or revoked')
    )) {
      if (Date.now() - lastTokenErrorSentAt > TOKEN_ERROR_INTERVAL_MS) {
        lastTokenErrorSentAt = Date.now();
        const authUrl = getGmailAuthUrl();
        if (TELEGRAM_BOT && authUrl) {
          TELEGRAM_BOT.sendMessage(
            TELEGRAM_CHAT_ID,
            `‚ö†Ô∏è *–í–ù–ò–ú–ê–ù–ò–ï! –¢–æ–∫–µ–Ω Gmail API —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!*\n\n` +
            `–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—á—Ç–æ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google API.\n\n` +
            `[–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏](${authUrl})\n\n` +
            `–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥–æ–π:\n/gmail_code –í–ê–®_–ö–û–î`,
            { parse_mode: "Markdown", disable_web_page_preview: false }
          );
        }
      } else {
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–º —Ç–æ–∫–µ–Ω–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –Ω–µ–¥–∞–≤–Ω–æ.');
      }
    }
  }
}

// ---- –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ ----
async function startEmailChecker(telegramBot) {
  TELEGRAM_BOT = telegramBot;
  await initGmailClient();
  // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥, —Ç–æ–ª—å–∫–æ —Å 9:00 –¥–æ 21:59 –ø–æ –ú–æ—Å–∫–≤–µ (UTC+3)
  schedule.scheduleJob('*/30 * 6-18 * * *', checkNewEmails);
  console.log('–ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ —Å –ø–æ—á—Ç—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫ (9-21 MSK) –ó–ê–ü–£–©–ï–ù–ê!');

  // === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gmail_code ===
  TELEGRAM_BOT.onText(/\/gmail_code\s+(.+)/, async (msg, match) => {
    const code = match[1].trim();

    if (!pendingOAuth2Client) {
      TELEGRAM_BOT.sendMessage(
        msg.chat.id,
        "–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!"
      );
      return;
    }

    try {
      const { tokens } = await pendingOAuth2Client.getToken(code);
      pendingOAuth2Client.setCredentials(tokens);
      fs.writeFileSync(TOKEN_PATH, JSON.stringify(tokens, null, 2));
      TELEGRAM_BOT.sendMessage(
        msg.chat.id,
        "‚úÖ Gmail API: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ—Å—Ç—É–ø –∫ –ø–æ—á—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
      );
      pendingOAuth2Client = null;
      await initGmailClient();
    } catch (error) {
      TELEGRAM_BOT.sendMessage(
        msg.chat.id,
        "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: " + error.message
      );
    }
  });
}

module.exports = { insertAppealFromEmail, startEmailChecker };
